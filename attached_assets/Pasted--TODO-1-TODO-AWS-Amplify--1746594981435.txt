# TODOアプリ 要件定義・設計書

## 1. 概要

個人利用を想定したTODOアプリケーションで、ブラウザ上で動作し、AWS Amplifyを利用してホスティングおよびバックエンド機能を提供します。タスクの管理とカテゴリによる整理機能を持ち、レスポンシブデザインに対応しています。

## 2. 要件定義

### 2.1 機能要件

#### 基本機能
- タスクの作成
- タスクの表示/一覧表示
- タスクの編集
- タスクの削除
- タスクの完了/未完了の切り替え

#### タスク属性
- タイトル（必須）
- 説明（オプション）
- 期限日時（オプション）
- 優先度（高・中・低）
- カテゴリID
- 作成日時
- 更新日時
- 完了フラグ

#### カテゴリ管理
- カテゴリの作成
- カテゴリの編集
- カテゴリの削除
- カテゴリによるタスクのフィルタリング

#### 検索・フィルタリング
- 複数条件によるフィルタリング（完了/未完了、優先度、カテゴリ）
- タスクのソート（期限順、優先度順、名前順、作成日順）

### 2.2 非機能要件

#### ユーザーインターフェース
- モダンでクリーンなUIデザイン
- レスポンシブデザイン（モバイル、タブレット、デスクトップ対応）
- 直感的な操作性

#### パフォーマンス
- 素早いレスポンス
- 多数のタスクでもスムーズな操作

#### セキュリティ
- データの永続化と保護

#### 技術要件
- フロントエンド：React.js
- スタイリング：Tailwind CSS
- バックエンド：AWS Amplify (GraphQL API, DynamoDB)
- 開発環境：Replit
- デプロイ先：AWS Amplify

## 3. アーキテクチャ設計

### 3.1 全体アーキテクチャ

クライアント-サーバーアーキテクチャを採用し、以下の構成となります。

- **フロントエンド**: React.jsによるSPA（シングルページアプリケーション）
- **バックエンド**: AWS Amplify (GraphQL API)
- **データストア**: DynamoDB

```
[クライアント(React)] <---> [AWS AppSync (GraphQL API)] <---> [DynamoDB]
                                     ^
                                     |
                      [AWS Amplify (認証・ホスティング)]
```

### 3.2 データモデル

#### GraphQL Schema

```graphql
type Task @model {
  id: ID!
  title: String!
  description: String
  isCompleted: Boolean!
  dueDate: AWSDateTime
  priority: Int
  categoryID: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Category @model {
  id: ID!
  name: String!
  color: String
  tasks: [Task] @connection(keyName: "byCategory", fields: ["id"])
}
```

## 4. UI/UX設計

### 4.1 画面構成

#### メイン画面
- ヘッダー（アプリタイトル、検索バー）
- サイドバー（カテゴリリスト、カテゴリ追加ボタン）
- メインエリア
  - フィルター・ソートコントロール
  - 進捗バー
  - タスク一覧（グリッドレイアウト）
- フローティングアクションボタン（新規タスク追加）

#### モーダル
- タスク作成/編集モーダル
  - タイトル入力
  - 説明入力
  - 期限設定
  - 優先度設定
  - カテゴリ選択
- カテゴリ作成/編集モーダル
  - 名前入力
  - 色選択

### 4.2 レスポンシブデザイン

- **モバイル（〜767px）**:
  - サイドバーはハンバーガーメニューに格納
  - タスクカードは1列表示
  - シンプル化されたコントロール

- **タブレット（768px〜1023px）**:
  - コンパクトなサイドバー
  - タスクカードは2列表示

- **デスクトップ（1024px〜）**:
  - 固定サイドバー
  - タスクカードは3列表示
  - 拡張されたコントロール

## 5. コンポーネント設計

### 5.1 主要コンポーネント

#### アプリケーション構造
- `App` - アプリケーションのルートコンポーネント
- `AppLayout` - レイアウト管理
  - `Header` - ヘッダーコンポーネント
  - `Sidebar` - サイドバーコンポーネント
  - `MainContent` - メインコンテンツエリア

#### 機能コンポーネント
- `TaskList` - タスク一覧表示
- `TaskCard` - 個別タスク表示
- `FilterBar` - フィルタリングコントロール
- `SortControl` - ソートコントロール
- `ProgressBar` - 進捗バー
- `TaskModal` - タスク作成/編集モーダル
- `CategoryModal` - カテゴリ作成/編集モーダル
- `CategoryList` - カテゴリ一覧
- `CategoryItem` - 個別カテゴリ表示

## 6. 状態管理設計

React Context APIまたはReduxを使用して以下の状態を管理します。

- **タスク状態**
  - タスク一覧
  - 選択中のタスク（編集時）
  - タスクの作成/更新/削除状態

- **カテゴリ状態**
  - カテゴリ一覧
  - 選択中のカテゴリ（編集時/フィルタリング時）
  - カテゴリの作成/更新/削除状態

- **UI状態**
  - モーダルの表示/非表示
  - サイドバーの表示/非表示（モバイル時）
  - フィルター設定
  - ソート設定

## 7. API設計

AWS Amplify GraphQL APIを使用して以下のCRUD操作を実装します。

### 7.1 タスク管理API

- タスク一覧取得
- タスク詳細取得
- タスク作成
- タスク更新
- タスク削除

### 7.2 カテゴリ管理API

- カテゴリ一覧取得
- カテゴリ詳細取得
- カテゴリ作成
- カテゴリ更新
- カテゴリ削除

## 8. 実装計画

### 8.1 フェーズ1: 基本設定と構造構築（1週間）
- React.jsプロジェクト初期化
- AWS Amplify設定
- GraphQLスキーマ定義
- 基本コンポーネント作成

### 8.2 フェーズ2: タスク管理機能（1週間）
- タスク一覧表示
- タスク作成モーダル
- タスク編集・削除機能
- タスク完了/未完了切り替え

### 8.3 フェーズ3: カテゴリ管理とフィルター機能（1週間）
- カテゴリ管理機能
- フィルター機能
- ソート機能
- 検索機能

### 8.4 フェーズ4: UI/UX改善（1週間）
- レスポンシブデザイン最適化
- アニメーション追加
- ユーザビリティ向上

### 8.5 フェーズ5: テストとデプロイ（数日）
- バグ修正
- パフォーマンス最適化
- AWS Amplifyへのデプロイ

## 9. 技術スタック詳細

### 9.1 フロントエンド
- **言語**: JavaScript (ES6+)
- **フレームワーク**: React.js
- **スタイリング**: Tailwind CSS
- **状態管理**: React Context API または Redux
- **HTTP通信**: AWS Amplify クライアントライブラリ

### 9.2 バックエンド
- **サーバー**: AWS AppSync (GraphQL)
- **データベース**: AWS DynamoDB
- **認証・認可**: AWS Cognito (必要な場合)
- **ホスティング**: AWS Amplify

## 10. 注意点と制約

- 開発はReplitで行い、自然言語を使ってコードを生成
- AWS Amplifyの制約・仕様に従った実装が必要
- レスポンシブデザインを徹底し、様々なデバイスで快適に使用できるようにする
- 一人用アプリケーションを想定しているため、複数ユーザー対応は考慮しない